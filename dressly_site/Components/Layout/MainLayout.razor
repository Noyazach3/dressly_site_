@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime // לשימוש עם localStorage

<div class="page">
    <!-- שורת הניווט העליונה -->
    <header class="top-row">
        <button class="btn-nav" @onclick="NavigateToHome">בית</button>

        @if (IsAuthenticated)
        {
            <button class="btn-nav" @onclick="NavigateToAddItem">הוסף פריט</button>
            <button class="btn-nav" @onclick="NavigateToPlanOutfits">תכנון אאוטפיט</button>
            <button class="btn-nav" @onclick="NavigateToViewOutfits">אאוטפיטים מתוכננים</button>
            <button class="btn-nav" @onclick="NavigateToLaundry">מעקב כביסה</button>

            @if (UserRole == "Admin")
            {
                <button class="btn-nav" @onclick="NavigateToUserManagement">ניהול משתמשים</button>
                <button class="btn-nav" @onclick="NavigateToStatistics">סטטיסטיקות</button>
            }

            <button class="btn-nav logout-btn" @onclick="Logout">התנתקות</button>
        }
        else
        {
            <button class="btn-nav" @onclick="NavigateToLogin">התחבר</button>
        }
    </header>

    <main>
        <article class="content">
            @Body
        </article>
    </main>
</div>

@code {
    private string UserRole = string.Empty;
    private bool IsAuthenticated = false;
    private bool isRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // הרצה רק בפעם הראשונה לאחר הרינדור
        {
            try
            {
                var username = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
                UserRole = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "role");

                IsAuthenticated = !string.IsNullOrEmpty(username);
                StateHasChanged(); // עדכון ה-UI לאחר טעינת הנתונים
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading user data: {ex.Message}");
            }
        }
    }

    private void NavigateToHome() => Navigation.NavigateTo("/home");
    private void NavigateToAddItem() => Navigation.NavigateTo("/add-item");
    private void NavigateToPlanOutfits() => Navigation.NavigateTo("/plan-outfits");
    private void NavigateToViewOutfits() => Navigation.NavigateTo("/outfit-list");
    private void NavigateToLaundry() => Navigation.NavigateTo("/laundry-list");
    private void NavigateToLogin() => Navigation.NavigateTo("/login");
    private void NavigateToUserManagement() => Navigation.NavigateTo("/admin/users");
    private void NavigateToStatistics() => Navigation.NavigateTo("/admin/stats");

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "username");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "role");
        IsAuthenticated = false;
        UserRole = string.Empty;
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}
