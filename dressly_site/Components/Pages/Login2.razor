@page "/login2"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3 class="text-center mt-4">🔑 התחברות</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger text-center">@ErrorMessage</div>
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">שם משתמש</label>
                    <InputText class="form-control" @bind-Value="loginModel.Username" required />
                </div>
                <div class="mb-3">
                    <label class="form-label">סיסמה</label>
                    <InputText class="form-control" @bind-Value="loginModel.Password" type="password" required />
                </div>
                <button type="submit" class="btn btn-primary w-100">🔓 התחבר</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var client = ClientFactory.CreateClient("API");
        var response = await client.GetAsync($"api/User/ValidateLogin?username={Uri.EscapeDataString(loginModel.Username)}&passwordHash={Uri.EscapeDataString(loginModel.Password)}");

        if (response.IsSuccessStatusCode)
        {
            var isValid = await response.Content.ReadFromJsonAsync<bool>();
            if (isValid)
            {
                var roleResponse = await client.GetAsync($"api/User/GetUserRole?username={Uri.EscapeDataString(loginModel.Username)}");
                if (roleResponse.IsSuccessStatusCode)
                {
                    var role = await roleResponse.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "role", role);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", loginModel.Username);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    var error = await roleResponse.Content.ReadAsStringAsync();
                    Console.WriteLine("🔴 שגיאה בקבלת תפקיד המשתמש: " + error);
                    ErrorMessage = "שגיאה בקבלת הרשאות המשתמש.";
                }
            }
            else
            {
                Console.WriteLine("⚠️ שם המשתמש או הסיסמה שגויים.");
                ErrorMessage = "שם המשתמש או הסיסמה שגויים.";
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("🔴 שגיאה באימות המשתמש: " + error);
            ErrorMessage = "שגיאה בעת ניסיון ההתחברות.";
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
