@page "/laundry-list"
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject HttpClient Http


@using MySql.Data.MySqlClient
@using System.Linq

<div class="center-page">
    <h1>רשימת פריטים שדורשים כביסה</h1>

    <div class="form-container">
        <h3>בחר פריטים שכובסו:</h3>
        <EditForm Model="@laundryItemsSelection" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var item in laundryItems)
            {
                <div class="form-group">
                    <div class="item-card">
                        <img src="@item.ImageURL" alt="@item.Category" class="item-image" />
                        <div class="item-details">
                            <p>@item.Category - @item.Color</p>
                            <p>מספר כביסות: @item.WashAfterUses</p>
                            <InputCheckbox @bind-Value="item.IsWashed" /> <label>כובס</label>
                        </div>
                    </div>
                </div>
            }

            <button type="submit" class="btn pink-btn">עדכן פריטים</button>
        </EditForm>
    </div>
</div>

@if (laundryItemsSelection.IsUpdated)
{
    <h4>העדכון בוצע בהצלחה!</h4>
}

@code {
    private LaundryItemsSelection laundryItemsSelection = new LaundryItemsSelection();
    private List<ClothingItem> laundryItems = new List<ClothingItem>();

    private async Task HandleValidSubmit()
    {
        // עדכון פריטים שכבסו בבסיס הנתונים
        await UpdateWashedItems();
    }

    private async Task LoadLaundryItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = @"SELECT * FROM ClothingItems WHERE WashAfterUses > 0";
                using (var command = new MySqlCommand(query, connection))
                {
                    var reader = await command.ExecuteReaderAsync();
                    var items = new List<ClothingItem>();
                    while (await reader.ReadAsync())
                    {
                        items.Add(new ClothingItem
                            {
                                ItemID = reader.GetInt32(reader.GetOrdinal("ItemID")),
                                Category = reader.GetString(reader.GetOrdinal("Category")),
                                Color = reader.GetString(reader.GetOrdinal("Color")),
                                ImageURL = reader.GetString(reader.GetOrdinal("ImageURL")),
                                WashAfterUses = reader.GetInt32(reader.GetOrdinal("WashAfterUses")),
                                IsWashed = reader.GetBoolean(reader.GetOrdinal("IsWashed"))  // נניח שיש עמודה כזו בבסיס הנתונים
                            });
                    }
                    laundryItems = items;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task UpdateWashedItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                foreach (var item in laundryItems)
                {
                    var query = @"UPDATE ClothingItems SET IsWashed = @IsWashed WHERE ItemID = @ItemID";

                    using (var command = new MySqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@IsWashed", item.IsWashed);
                        command.Parameters.AddWithValue("@ItemID", item.ItemID);
                        await command.ExecuteNonQueryAsync();
                    }
                }
                laundryItemsSelection.IsUpdated = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating laundry items: {ex.Message}");
        }
    }

    public class LaundryItemsSelection
    {
        public bool IsUpdated { get; set; } = false;
    }

    public class ClothingItem
    {
        public int ItemID { get; set; }
        public string Category { get; set; }
        public string Color { get; set; }
        public string ImageURL { get; set; }
        public int WashAfterUses { get; set; }
        public bool IsWashed { get; set; }
    }
}

<style>
    .center-page {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 20px;
    }

    .form-container {
        width: 100%;
        max-width: 800px;
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .item-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 8px;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-bottom: 20px;
    }

    .item-card:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .item-image {
        width: 100px;
        height: 100px;
        border-radius: 5px;
    }

    .item-details {
        margin-top: 10px;
    }

    .btn {
        font-size: 1.2rem;
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 20px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .pink-btn {
        background-color: #ff69b4;
        color: white;
    }

    .pink-btn:hover {
        background-color: #ff1493;
        transform: scale(1.05);
    }
</style>
