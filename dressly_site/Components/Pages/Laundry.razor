@page "/laundry-list"
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject HttpClient Http
@using ClassLibrary1.Models
@using MySql.Data.MySqlClient
@using System.Linq

<div class="center-page">
    <h1>רשימת פריטים שדורשים כביסה</h1>

    <div class="form-container">
        <h3>בחר פריטים שכובסו:</h3>
        <EditForm Model="@laundryItemsSelection" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var item in laundryItems)
            {
                <div class="form-group">
                    <div class="item-card">
                        @if (item.ImageID.HasValue && laundryImageCache.ContainsKey(item.ItemID))
                        {
                            <img src="@($"data:image/jpeg;base64,{laundryImageCache[item.ItemID]}")" alt="@item.Category" class="item-image" />
                        }
                        <div class="item-details">
                            <p>@item.Category - @item.ColorName</p>
                            <p>מספר כביסות: @item.WashAfterUses</p>
                            <InputCheckbox @bind-Value="item.IsWashed" /> <label>כובס</label>
                        </div>
                    </div>
                </div>
            }

            <button type="submit" class="btn pink-btn">עדכן פריטים</button>
        </EditForm>
    </div>
</div>

@if (laundryItemsSelection.IsUpdated)
{
    <h4>העדכון בוצע בהצלחה!</h4>
}

@code {
    private LaundryItemsSelection laundryItemsSelection = new LaundryItemsSelection();
    private List<ClothingItem> laundryItems = new List<ClothingItem>();
    // מילון לאחסון נתוני תמונה בפורמט Base64, כאשר המפתח הוא ItemID
    private Dictionary<int, string> laundryImageCache = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadLaundryItems();
    }

    private async Task HandleValidSubmit()
    {
        await UpdateWashedItems();
    }

    private async Task LoadLaundryItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = @"SELECT * FROM ClothingItems WHERE WashAfterUses > 0";
                using (var command = new MySqlCommand(query, connection))
                {
                    var reader = await command.ExecuteReaderAsync();
                    var items = new List<ClothingItem>();
                    while (await reader.ReadAsync())
                    {
                        items.Add(new ClothingItem
                            {
                                ItemID = reader.GetInt32(reader.GetOrdinal("ItemID")),
                                Category = reader.GetString(reader.GetOrdinal("Category")),
                                ColorName = reader.GetString(reader.GetOrdinal("Color")),
                                WashAfterUses = reader.GetInt32(reader.GetOrdinal("WashAfterUses")),
                                IsWashed = reader.GetBoolean(reader.GetOrdinal("IsWashed"))
                            });
                    }
                    laundryItems = items;
                }
            }
            // טוענים את התמונות עבור כל פריט עם ImageID
            foreach (var item in laundryItems)
            {
                if (item.ImageID.HasValue)
                {
                    var imgData = await GetImageData(item.ImageID.Value);
                    if (imgData != null)
                    {
                        laundryImageCache[item.ItemID] = Convert.ToBase64String(imgData);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task UpdateWashedItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                foreach (var item in laundryItems)
                {
                    var query = @"UPDATE ClothingItems SET IsWashed = @IsWashed WHERE ItemID = @ItemID";
                    using (var command = new MySqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@IsWashed", item.IsWashed);
                        command.Parameters.AddWithValue("@ItemID", item.ItemID);
                        await command.ExecuteNonQueryAsync();
                    }
                }
                laundryItemsSelection.IsUpdated = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating laundry items: {ex.Message}");
        }
    }

    private async Task<byte[]> GetImageData(int imageId)
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");
        byte[] imageData = null;
        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT ImageData FROM image WHERE ImageID = @ImageID";
                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ImageID", imageId);
                    var reader = await command.ExecuteReaderAsync();
                    if (await reader.ReadAsync())
                    {
                        imageData = reader.IsDBNull(reader.GetOrdinal("ImageData")) ? null : (byte[])reader["ImageData"];
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        return imageData;
    }

    public class LaundryItemsSelection
    {
        public bool IsUpdated { get; set; } = false;
    }
}
