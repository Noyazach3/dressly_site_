@page "/outfit-planner-thematic"
@inject HttpClient Http
@inject ClassLibrary1.Services.LoginSession LoginSession
@inject NavigationManager Navigation
@using ClassLibrary1.Models
@using ClassLibrary1.DTOs
@using System.Net.Http.Json

<div class="container py-5 text-center" style="max-width: 1000px;">
    <h2 class="fw-bold text-pink mb-3">✨ תכנון אאוטפיט לפי נושא</h2>

    <EditForm Model="@outfitSelection" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row justify-content-center mb-4">
            <div class="col-md-4 text-end">
                <label class="form-label fw-semibold">בחרי עונה:</label>
                <InputSelect class="form-select" @bind-Value="outfitSelection.Season">
                    <option value="Summer"> קיץ</option>
                    <option value="Winter"> חורף</option>
                </InputSelect>
            </div>

            <div class="col-md-4 text-end">
                <label class="form-label fw-semibold">בחרי סגנון:</label>
                <InputSelect class="form-select" @bind-Value="outfitSelection.Style">
                    <option value="1"> חולצה ומכנס</option>
                    <option value="2"> חצאית וגופייה</option>
                    <option value="3"> שמלה</option>
                </InputSelect>
            </div>
        </div>

        <button type="submit" class="btn btn-sm px-4 py-2 rounded-pill mb-4"
                style="background-color: rosybrown; color: white; font-weight: 600;">
            המשך
        </button>
    </EditForm>

    @if (showItems)
    {
        @foreach (var category in categoriesToShow)
        {
            var itemsForCategory = clothingItems.Where(i => i.Category == category).ToList();
            if (!itemsForCategory.Any())
            {
                continue;
            }

            <div class="mb-5 text-end" dir="rtl">
                <h5 class="text-pink fw-semibold mb-3">@GetCategoryLabel(category)</h5>
                <div class="row row-cols-2 row-cols-md-4 g-3 justify-content-center">
                    @foreach (var item in itemsForCategory)
                    {
                        <div class="col">
                            <div class="card border-2 @(IsItemSelected(item) ? "border-pink shadow" : "border-0 shadow-sm") small-card"
                                 @onclick="() => SelectItem(item)">
                                @if (item.ImageID.HasValue && imageCache.ContainsKey(item.ItemID))
                                {
                                    <img src="@($"data:image/jpeg;base64,{imageCache[item.ItemID]}")" class="w-100 object-fit-cover rounded-top" style="height: 130px;" />
                                }
                                <div class="card-body py-2 px-2">
                                    <p class="card-text small text-muted mb-0">@item.Category - @item.ColorName</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="text-center mt-4">
            <button class="btn btn-sm px-4 py-2 rounded-pill"
                    style="background-color: rosybrown; color: white; font-weight: 600;"
                    @onclick="SaveOutfit">
                יצירת אאוטפיט
            </button>
        </div>
    }
</div>

<style>
    .border-pink {
        border: 3px solid #ec87b8 !important;
        border-radius: 12px;
    }
</style>

@code {
    private OutfitSelection outfitSelection = new();
    private List<ClothingItem> clothingItems = new();
    private Dictionary<int, string> imageCache = new();
    private List<string> categoriesToShow = new();
    private bool showItems = false;

    private async Task HandleValidSubmit()
    {
        showItems = false;

        clothingItems = await Http.GetFromJsonAsync<List<ClothingItem>>(
            $"api/clothingitems/user/{LoginSession.UserID}");

        clothingItems = clothingItems
            .Where(i => i.Season == outfitSelection.Season || i.Season == "Neutral")
            .ToList();

        categoriesToShow = outfitSelection.Style switch
        {
            1 => new() { "Shirt", "Pants" },
            2 => new() { "Skirt", "Top" },
            3 => new() { "Dress" },
            _ => new()
        };

        if (!categoriesToShow.Contains("Shoes")) categoriesToShow.Add("Shoes");
        if (!categoriesToShow.Contains("Accessories")) categoriesToShow.Add("Accessories");

        imageCache.Clear();
        foreach (var item in clothingItems)
        {
            if (item.ImageID.HasValue)
            {
                try
                {
                    var imageBytes = await Http.GetByteArrayAsync($"api/image/{item.ImageID}");
                    imageCache[item.ItemID] = Convert.ToBase64String(imageBytes);
                }
                catch { }
            }
        }

        showItems = true;
    }

    private void SelectItem(ClothingItem item)
    {
        outfitSelection.SelectedItems[item.Category] = item;
    }

    private bool IsItemSelected(ClothingItem item)
    {
        return outfitSelection.SelectedItems.TryGetValue(item.Category, out var selected) &&
               selected.ItemID == item.ItemID;
    }

    private async Task SaveOutfit()
    {
        try
        {
            var selectedItems = outfitSelection.SelectedItems.Values.ToList();

            if (selectedItems.Count == 0)
            {
                Console.WriteLine("⚠️ לא נבחרו פריטים");
                return;
            }

            var outfit = new OutfitSaveDto
                {
                    UserID = LoginSession.UserID,
                    Name = $"אאוטפיט מ-{DateTime.Now:dd/MM/yyyy HH:mm}",
                    DateCreated = DateTime.Now,
                    ClothingItemIDs = selectedItems.Select(i => i.ItemID).ToList()
                };

            var response = await Http.PostAsJsonAsync("api/outfits/add", outfit);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/outfit-list");
            }
            else
            {
                var errorText = await response.Content.ReadAsStringAsync();
                Console.WriteLine("❌ שגיאה בשמירת האאוטפיט:");
                Console.WriteLine(errorText);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ שגיאה כללית בשמירת אאוטפיט: {ex.Message}");
        }
    }

    private string GetCategoryLabel(string category) => category switch
    {
        "Shirt" => "חולצה",
        "Top" => "גופייה",
        "Pants" => "מכנסיים",
        "Skirt" => "חצאית",
        "Dress" => "שמלה",
        "Shoes" => "נעליים",
        "Accessories" => "אקססוריז",
        _ => category
    };

    public class OutfitSelection
    {
        public string Season { get; set; } = "Summer";
        public int Style { get; set; } = 1;
        public Dictionary<string, ClothingItem> SelectedItems { get; set; } = new();
    }
}
