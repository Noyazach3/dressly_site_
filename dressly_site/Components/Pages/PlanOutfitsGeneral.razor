@page "/plan-outfits-general"
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject HttpClient Http
@using ClassLibrary1.Models
@using MySql.Data.MySqlClient

<div class="container py-4 text-center" style="max-width: 1000px;">
    <div class="mb-5">
        <h2 class="fw-bold text-pink mb-2">✨ תכננ/י את הלוק שלך</h2>
        <p class="text-muted small">בחר/י פריט אחד מכל קטגוריה וצרי לוק מושלם</p>
    </div>

    <EditForm Model="@outfitSelection" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @foreach (var category in categories)
        {
            <div class="mb-5 text-end" dir="rtl">
                <h5 class="text-pink fw-semibold mb-3">@GetCategoryLabel(category)</h5>
                <div class="row row-cols-2 row-cols-md-4 g-3 justify-content-center">
                    @foreach (var item in clothingItems.Where(i => i.Category == category))
                    {
                        <div class="col">
                            <div class="card border-0 shadow-sm small-card" @onclick="() => SelectItem(item)">
                                @if (item.ImageID.HasValue && imageCache.ContainsKey(item.ItemID))
                                {
                                    <img src="@($"data:image/jpeg;base64,{imageCache[item.ItemID]}")" class="w-100 object-fit-cover rounded-top" style="height: 130px;" />
                                }
                                <div class="card-body py-2 px-2">
                                    <p class="card-text small text-muted mb-0">@item.Category - @item.ColorName</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-sm px-4 py-2 rounded-pill" style="background-color: #f4b6c2; color: white; font-weight: 600;">
                המשך לתכנון
            </button>
        </div>
    </EditForm>

    @if (outfitSelection.IsOutfitComplete)
    {
        <div class="mt-5 bg-light rounded-4 p-4 shadow-sm">
            <h5 class="text-pink fw-bold mb-4">💖 האאוטפיט שלך מוכן!</h5>
            <div class="row justify-content-center g-4">
                @foreach (var item in outfitSelection.SelectedItems.Values)
                {
                    <div class="col-6 col-md-3">
                        @if (item.ImageID.HasValue && imageCache.ContainsKey(item.ItemID))
                        {
                            <img src="@($"data:image/jpeg;base64,{imageCache[item.ItemID]}")" class="img-fluid rounded mb-2 shadow-sm" />
                        }
                        <p class="small mb-0"><strong>@item.Category</strong> - @item.ColorName</p>
                    </div>
                }
            </div>
        </div>
    }
</div>
@if (outfitSelection.IsOutfitComplete)
{
    <h4>האאוטפיט שלך מוכן!</h4>
    <div>
        <h5>פריטי האאוטפיט שנבחרו:</h5>
        @foreach (var item in outfitSelection.SelectedItems.Values)
        {
            <p>@item.Category - @item.ColorName</p>
        }
    </div>
}

@code {

    private OutfitSelection outfitSelection = new OutfitSelection();
    private List<ClothingItem> clothingItems = new List<ClothingItem>();
    // מילון לאחסון נתוני תמונה כבסיס64, כאשר המפתח הוא ItemID
    private Dictionary<int, string> imageCache = new Dictionary<int, string>();

    private string GetCategoryLabel(string category)
    {
        return category switch
        {
            "Shirt" => "חולצה",
            "Pants" => "מכנסיים",
            "Skirt" => "חצאית",
            "Dress" => "שמלה",
            "Shoes" => "נעליים",
            "Accessories" => "אקססוריז",
            _ => category
        };
    }

    // רשימה של קטגוריות
    private List<string> categories = new List<string> { "Shirt", "Pants", "Skirt", "Dress", "Shoes", "Accessories" };

    protected override async Task OnInitializedAsync()
    {
        await LoadClothingItems();
    }

    private async Task HandleValidSubmit()
    {
        outfitSelection.IsOutfitComplete = true;
    }

    private async Task LoadClothingItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = @"SELECT * FROM ClothingItems";
                using (var command = new MySqlCommand(query, connection))
                {
                    var reader = await command.ExecuteReaderAsync();
                    var items = new List<ClothingItem>();
                    while (await reader.ReadAsync())
                    {
                        items.Add(new ClothingItem
                            {
                                ItemID = reader.GetInt32(reader.GetOrdinal("ItemID")),
                                Category = reader.GetString(reader.GetOrdinal("Category")),
                                ColorName = reader.GetString(reader.GetOrdinal("Color")),
                                // שולפים רק את ImageID, לא ImageData
                                ImageID = reader.IsDBNull(reader.GetOrdinal("ImageID")) ? null : reader.GetInt32(reader.GetOrdinal("ImageID"))
                            });
                    }
                    clothingItems = items;
                }
            }

            // טוענים את נתוני התמונות לכל פריט שיש לו ImageID
            foreach (var item in clothingItems)
            {
                if (item.ImageID.HasValue)
                {
                    var imgData = await GetImageData(item.ImageID.Value);
                    if (imgData != null)
                    {
                        imageCache[item.ItemID] = Convert.ToBase64String(imgData);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task SelectItem(ClothingItem item)
    {
        if (!outfitSelection.SelectedItems.ContainsKey(item.Category))
        {
            outfitSelection.SelectedItems[item.Category] = item;
        }
    }

    private async Task<byte[]> GetImageData(int imageId)
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");
        byte[] imageData = null;

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = "SELECT ImageData FROM image WHERE ImageID = @ImageID";
                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ImageID", imageId);
                    var reader = await command.ExecuteReaderAsync();

                    if (await reader.ReadAsync())
                    {
                        imageData = reader.IsDBNull(reader.GetOrdinal("ImageData")) ? null : (byte[])reader["ImageData"];
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return imageData;
    }

    public class OutfitSelection
    {
        public Dictionary<string, ClothingItem> SelectedItems { get; set; } = new Dictionary<string, ClothingItem>();
        public bool IsOutfitComplete { get; set; } = false;
    }
}
