@page "/plan-outfits-general" 
@inject NavigationManager Navigation // שירות לניווט לעמודים אחרים
@inject HttpClient Http // שירות לשליחת בקשות ל-API
@inject ClassLibrary1.Services.LoginSession LoginSession // שירות שמכיל את מזהה המשתמש המחובר
@using ClassLibrary1.Models 
@using ClassLibrary1.DTOs 

<div class="container py-4 text-center" style="max-width: 1000px;">
    <div class="mb-5">
        <h2 class="fw-bold text-pink mb-2">✨ תכננ/י את הלוק שלך</h2>
        <p class="text-muted small">בחר/י פריט אחד מכל קטגוריה וצרי לוק מושלם</p>
    </div>

    <!-- טופס בחירת פריטים -->
    <EditForm Model="@outfitSelection" OnSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @foreach (var category in categories)
        {
            <div class="mb-5 text-end" dir="rtl">
                <h5 class="text-pink fw-semibold mb-3">@GetCategoryLabel(category)</h5>

                <div class="row row-cols-2 row-cols-md-4 g-3 justify-content-center">
                    @foreach (var item in clothingItems.Where(i => i.Category == category))
                    {
                        <div class="col">
                            <!-- כרטיס פריט -->
                            <div class="card border-2 @(IsItemSelected(item) ? "border-pink shadow" : "border-0 shadow-sm") small-card"
                                 @onclick="() => SelectItem(item)">
                                @if (item.ImageID.HasValue && imageCache.ContainsKey(item.ItemID))
                                {
                                    <img src="@($"data:image/jpeg;base64,{imageCache[item.ItemID]}")" class="w-100 object-fit-cover rounded-top" style="height: 130px;" />
                                }
                                <div class="card-body py-2 px-2">
                                    <p class="card-text small text-muted mb-0">@item.Category - @item.ColorName</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- כפתור שליחה -->
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-sm px-4 py-2 rounded-pill"
                    style="background-color: #f4b6c2; color: white; font-weight: 600;">
                צור אאוטפיט
            </button>
        </div>
    </EditForm>

    <!-- תצוגה של האאוטפיט לאחר שמירה -->
    @if (outfitSelection.IsOutfitComplete)
    {
        <div class="mt-5 bg-light rounded-4 p-4 shadow-sm">
            <h5 class="text-pink fw-bold mb-4">💖 האאוטפיט שלך מוכן ונשמר!</h5>
            <div class="row justify-content-center g-4">
                @foreach (var item in outfitSelection.SelectedItems.Values)
                {
                    <div class="col-6 col-md-3">
                        @if (item.ImageID.HasValue && imageCache.ContainsKey(item.ItemID))
                        {
                            <img src="@($"data:image/jpeg;base64,{imageCache[item.ItemID]}")" class="img-fluid rounded mb-2 shadow-sm" />
                        }
                        <p class="small mb-0"><strong>@item.Category</strong> - @item.ColorName</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .border-pink {
        border: 3px solid #ec87b8 !important;
        border-radius: 12px;
    }
</style>

@code {
    private OutfitSelection outfitSelection = new(); // אובייקט שמכיל את הפריטים שנבחרו
    private List<ClothingItem> clothingItems = new(); // כל הבגדים של המשתמש
    private Dictionary<int, string> imageCache = new(); // מיפוי מזהי פריטים -> תמונות

    private List<string> categories = new() { "Shirt", "Pants", "Skirt", "Dress", "Shoes", "Jacket", "Accessories" };

    // שלב הטעינה הראשונית של הבגדים
    protected override async Task OnInitializedAsync()
    {
        await LoadClothingItems();
    }

    // שליחת האאוטפיט לשרת
    private async Task HandleValidSubmit()
    {
        outfitSelection.IsOutfitComplete = false;

        try
        {
            var itemIDs = outfitSelection.SelectedItems.Values.Select(i => i.ItemID).ToList();

            var outfit = new OutfitSaveDto
                {
                    UserID = LoginSession.UserID,
                    Name = $"אאוטפיט מ-{DateTime.Now:dd/MM/yyyy HH:mm}",
                    DateCreated = DateTime.Now,
                    ClothingItemIDs = itemIDs
                };

            var response = await Http.PostAsJsonAsync("api/outfits/add", outfit);

            if (response.IsSuccessStatusCode)
            {
                outfitSelection.IsOutfitComplete = true;
                Console.WriteLine("✅ האאוטפיט נשמר בהצלחה במסד הנתונים");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine("❌ שמירת האאוטפיט נכשלה:");
                Console.WriteLine(error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❗ שגיאה כללית בשמירת האאוטפיט: {ex.Message}");
        }

        StateHasChanged(); // עדכון התצוגה
    }

    // שליפת פריטי הלבוש של המשתמש
    private async Task LoadClothingItems()
    {
        try
        {
            clothingItems = await Http.GetFromJsonAsync<List<ClothingItem>>(
                $"api/clothingitems/user/{LoginSession.UserID}");

            foreach (var item in clothingItems)
            {
                if (item.ImageID.HasValue)
                {
                    var imgData = await GetImageData(item.ImageID.Value);
                    if (imgData != null)
                    {
                        imageCache[item.ItemID] = Convert.ToBase64String(imgData);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ שגיאה בטעינת פריטים: {ex.Message}");
        }
    }

    // שליפת תמונה לפי מזהה
    private async Task<byte[]> GetImageData(int imageId)
    {
        try
        {
            return await Http.GetByteArrayAsync($"api/image/{imageId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ שגיאה בטעינת תמונה: {ex.Message}");
            return null;
        }
    }

    // בחירת פריט לפי קטגוריה
    private void SelectItem(ClothingItem item)
    {
        outfitSelection.SelectedItems[item.Category] = item;
    }

    // בדיקה האם פריט מסוים נבחר
    private bool IsItemSelected(ClothingItem item)
    {
        return outfitSelection.SelectedItems.TryGetValue(item.Category, out var selected) &&
               selected.ItemID == item.ItemID;
    }

    // תרגום קטגוריות לעברית
    private string GetCategoryLabel(string category) => category switch
    {
        "Shirt" => "חולצה",
        "Pants" => "מכנסיים",
        "Skirt" => "חצאית",
        "Dress" => "שמלה",
        "Shoes" => "נעליים",
        "Accessories" => "אקססוריז",
        "Jacket" => "גקט",
        _ => category
    };
}
