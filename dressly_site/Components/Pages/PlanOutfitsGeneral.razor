@page "/plan-outfits-general"
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject HttpClient Http


@using MySql.Data.MySqlClient

<div class="center-page">
    <h1>תכנון אאוטפיט כללי</h1>

    <div class="form-container">
        <h3>בחר פריט מכל קטגוריה:</h3>
        <EditForm Model="@outfitSelection" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var category in categories)
            {
                <div class="category-section">
                    <h4>@category</h4>
                    <div class="item-grid">
                        @foreach (var item in clothingItems.Where(i => i.Category == category))
                        {
                            <div class="item-card" @onclick="() => SelectItem(item)">
                                <img src="@item.ImageURL" alt="@item.Category" class="item-image" />
                                <div class="item-details">
                                    <p>@item.Category - @item.Color</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <button type="submit" class="btn pink-btn">המשך לתכנון</button>
        </EditForm>
    </div>
</div>

@if (outfitSelection.IsOutfitComplete)
{
    <h4>האאוטפיט שלך מוכן!</h4>
    <div>
        <h5>פריטי האאוטפיט שנבחרו:</h5>
        @foreach (var item in outfitSelection.SelectedItems.Values)
        {
            <p>@item.Category - @item.Color</p>
        }
    </div>
}

@code {
    private OutfitSelection outfitSelection = new OutfitSelection();
    private List<ClothingItem> clothingItems = new List<ClothingItem>();

    // רשימה של קטגוריות
    private List<string> categories = new List<string> { "Shirt", "Pants", "Skirt", "Dress", "Shoes", "Accessories" };

    private async Task HandleValidSubmit()
    {
        outfitSelection.IsOutfitComplete = true;
    }

    private async Task LoadClothingItems()
    {
        var connectionString = Configuration.GetConnectionString("DefaultConnection");

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                await connection.OpenAsync();
                var query = @"SELECT * FROM ClothingItems";
                using (var command = new MySqlCommand(query, connection))
                {
                    var reader = await command.ExecuteReaderAsync();
                    var items = new List<ClothingItem>();
                    while (await reader.ReadAsync())
                    {
                        items.Add(new ClothingItem
                            {
                                ItemID = reader.GetInt32(reader.GetOrdinal("ItemID")),
                                Category = reader.GetString(reader.GetOrdinal("Category")),
                                Color = reader.GetString(reader.GetOrdinal("Color")),
                                ImageURL = reader.GetString(reader.GetOrdinal("ImageURL"))
                            });
                    }
                    clothingItems = items;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void SelectItem(ClothingItem item)
    {
        if (!outfitSelection.SelectedItems.ContainsKey(item.Category))
        {
            outfitSelection.SelectedItems[item.Category] = item;
        }
    }

    public class OutfitSelection
    {
        public Dictionary<string, ClothingItem> SelectedItems { get; set; } = new Dictionary<string, ClothingItem>();
        public bool IsOutfitComplete { get; set; } = false;
    }

    public class ClothingItem
    {
        public int ItemID { get; set; }
        public string Category { get; set; }
        public string Color { get; set; }
        public string ImageURL { get; set; }
    }
}

<style>
    .center-page {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 20px;
    }

    h1 {
        font-size: 2rem;
        margin-bottom: 20px;
    }

    .form-container {
        width: 100%;
        max-width: 800px;
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .category-section {
        margin-bottom: 30px;
    }

    .item-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 15px;
    }

    .item-card {
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 8px;
        cursor: pointer;
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .item-card:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

    .item-image {
        width: 100%;
        height: auto;
        border-radius: 5px;
    }

    .item-details {
        margin-top: 10px;
    }

    .btn {
        font-size: 1.2rem;
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 20px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .pink-btn {
        background-color: #ff69b4;
        color: white;
    }

        .pink-btn:hover {
            background-color: #ff1493;
            transform: scale(1.05);
        }
</style>
